using CRM_Application.Security;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CRM_Application.Database {

    /*
     * User table is stored as:
     *                  UserID Username Password PermissionLevel
     *                  UserID is automatically generated by the database
     *                  Password should be hashed and never stored in plain text. Also should be stored as byte array.
     *                  we likely won't utilize PermissionLevel in this project, but future work on the project could.
     */
    public sealed class UserTableManager {

        public static bool AddUserToDatabase(string username, string UnhashedPassword, int permissionLevel = 0) {

            if (username.Length < 0 || UnhashedPassword.Length < 0) {
                return false;
            }

            PasswordHash hashedPassword = new PasswordHash(UnhashedPassword);
            byte[] hashedPasswordBytes = hashedPassword.ToArray();
            
            using (SqlConnection sqlconnection = new SqlConnection(ConfigurationHandler.CONNECTION_STRING["AppointmentsDatabase"].ConnectionString)) {
                sqlconnection.Open();

                string query = @"Insert Into [Users] (Username, Password, PermissionLevel) Values(@_Username, @_Password, @_PermissionLevel)";

                using (SqlCommand command = new SqlCommand(query, sqlconnection)) {
                    SqlParameter sqlParam = command.Parameters.AddWithValue("@_Username", username);
                    command.Parameters.AddWithValue("@_Password", hashedPasswordBytes);
                    command.Parameters.AddWithValue("@_PermissionLevel", permissionLevel);

                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public static bool RemoveUsersDatabaseEntry(int idOfRemovalItem) {
          
            using (SqlConnection sqlconnection = new SqlConnection(ConfigurationHandler.CONNECTION_STRING["AppointmentsDatabase"].ConnectionString)) { 
                sqlconnection.Open();

                string query = @"DELETE FROM [Users] where UserID = '@ID'";
                using (SqlCommand command = new SqlCommand(query, sqlconnection)) {

                    command.Parameters.AddWithValue("@ID", idOfRemovalItem);
                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public static bool LogUserIn(string username, string unhashedPassword) {

            try {
                using (SqlConnection sqlconnection = new SqlConnection(ConfigurationHandler.CONNECTION_STRING["AppointmentsDatabase"].ConnectionString)) {
                    sqlconnection.Open();

                    string query = @"SELECT Username, Password FROM [Users] where Username=@username";
                    using (SqlCommand command = new SqlCommand(query, sqlconnection)) {
                        command.Parameters.AddWithValue("@username", username);

                        using (SqlDataReader sqlDataReader = command.ExecuteReader()) {

                            if (sqlDataReader.RecordsAffected == 1) {

                                while (sqlDataReader.Read()) {
                                    byte[] hashedPasswordBytes = new byte[1024];

                                    sqlDataReader.GetBytes(sqlDataReader.GetOrdinal("Password"), 0, hashedPasswordBytes, 0, 1024);
                                    PasswordHash passwordHash = new PasswordHash(hashedPasswordBytes);

                                    if (passwordHash.Verify(unhashedPassword)) {
                                        Logger.LogInformation("Logged in user: " + username);
                                        return true;
                                    }
                                    else {
                                        Logger.LogException(new UnauthorizedAccessException("Invalid login attempted"));
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (SqlException exception) {
                Logger.LogException(exception);
            }
            return false;
        }
    }
}
